1. Re-implement the SerialSender class to use a separate thread for serial communication....Done
    1c. Create a button on the GUI (it can be grey-out or invisible except during a serial transaction) that gives the user
        the option to kill the serial transaction. This will result in the SerialSender class Interrupting the thread instance
        and resetting the serial port instance.

2. Display feedback from the microcontroller in the GUI status bar. Consider expanding the status panel into three (see below) components:
    2a. A 'static' status section that will always display certain information, such as the connectivity status of the serial port,
        currently available port names, the number of commands in the command grid, number of serial transactions, current channel values, etc.
    2b. The current 'dynamic' status section that is a scrolling text area where methods can display success/error messages.
    2c. A dual-split section that records (in byte and/or human-readable form) the data that is (1) sent to and (2) received from the microcontroller. 

3. A button to explicitly disconnect the serial (this is implicitly done in the Refresh Serial button-- should split up the behavior of 
   this button so that is it more clear what it actually does in terms of resetting the serial connection and finding available ports)
    3a. A button to just close the port. This should be a separate behavior from a hard reset of the port. It should just do what fclose() does.
    3b. A button for hard-reset behavior (hard-reset and attempt to re-open).
    3c. A button that just refreshes the list of available port names. 
    3d. A button that tries to re-open a closed serial connection.
    3e. No more 'refresh serial' button. Much too ambiguous. Replace by the four buttons listed above. Note that none of these should try to implicitly
        send a Reset command, since they are probably being used when there is already a problem with the serial connection.

4. A button alongside each command grid row that will clear the row (and shift up any commands that may be below it). Currently there is no way to 
   delete a single command from the command grid, which is annoying.

5. Figure out how to make MSVS faster at creating the open/save file dialogs (this may just be an artifact of always running in debug-mode).

6. There is currently a Java script to automatically generate a playfile. Consider adding something of this nature to the GUI, for example, a function-entry
   bar, similar to what Excel/LibreOffice, etc. has, but tailored towards defining a function for each channel (set of channels) to specify how the current
   varies with time. Entering commands in this fashion should automatically populate the command grid, which can then be saved. This would be convenient since 
   a lot of the testing of the cards involves ramp functions, which is tedious to write out by hand. It would be far more convenient to be able to create a 
   simple function in the GUI.
    6a. Each function-entry row would have this general layout:
        [button row or drop-down to select a set of channels] [start current] [stop current] [T (ms): either total run-time, or increment between commands]
    6b. Don't allow more than one function to be defined for a given channel
    6c. New Function / Delete Function
    6d. Apply (clear (ask to save current data) and populate command grid)

7. Incorporate a simple check to see whether the command grid is empty before asking to save (don't ask if it is). This is not necessary, just mitigates 
   a slight annoyance with the current implementation.
